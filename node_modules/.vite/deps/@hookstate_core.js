import {
  require_react
} from "./chunk-QRTM5DFI.js";
import {
  __toESM,
  init_buffer,
  init_virtual_process_polyfill,
  process
} from "./chunk-TDWX7732.js";

// ../ui/node_modules/.pnpm/@hookstate+core@3.0.13/node_modules/@hookstate/core/dist/index.es.js
init_virtual_process_polyfill();
init_buffer();
var import_react = __toESM(require_react());
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var postpone = Symbol("postpone");
var none = Symbol("none");
function createState(initial) {
  var methods = createStore(initial).toMethods();
  var devtools = createState[DevToolsID];
  if (devtools) {
    methods.attach(devtools);
  }
  return methods.self;
}
function useState(source) {
  return useHookstate(source);
}
function useHookstate(source) {
  var parentMethods = typeof source === "object" && source !== null ? source[self] : void 0;
  if (parentMethods) {
    if (parentMethods.isMounted) {
      var _a = import_react.default.useState({}), setValue_1 = _a[1];
      return useSubscribedStateMethods(parentMethods.state, parentMethods.path, function() {
        return setValue_1({});
      }, parentMethods).self;
    } else {
      var _b = import_react.default.useState({ state: parentMethods.state }), value_1 = _b[0], setValue_2 = _b[1];
      var state = useSubscribedStateMethods(value_1.state, RootPath, function() {
        return setValue_2({ state: value_1.state });
      }, value_1.state).self;
      for (var ind = 0; ind < parentMethods.path.length; ind += 1) {
        state = state.nested(parentMethods.path[ind]);
      }
      return state;
    }
  } else {
    var _c = import_react.default.useState(function() {
      return { state: createStore(source) };
    }), value_2 = _c[0], setValue_3 = _c[1];
    var result = useSubscribedStateMethods(value_2.state, RootPath, function() {
      return setValue_3({ state: value_2.state });
    }, value_2.state);
    if (isDevelopmentMode) {
      var isEffectExecutedAfterRender_1 = import_react.default.useRef(false);
      isEffectExecutedAfterRender_1.current = false;
      import_react.default.useEffect(function() {
        isEffectExecutedAfterRender_1.current = true;
        return function() {
          isEffectExecutedAfterRender_1.current && value_2.state.destroy();
        };
      });
    } else {
      import_react.default.useEffect(function() {
        return function() {
          return value_2.state.destroy();
        };
      }, []);
    }
    var devtools = useState[DevToolsID];
    if (devtools) {
      result.attach(devtools);
    }
    return result.self;
  }
}
function StateFragment(props) {
  var scoped = useState(props.state);
  return props.children(scoped);
}
function Downgraded() {
  return {
    id: DowngradedID
  };
}
var DevToolsID = Symbol("DevTools");
function DevTools(state) {
  var plugin = state.attach(DevToolsID);
  if (plugin[0] instanceof Error) {
    return EmptyDevToolsExtensions;
  }
  return plugin[0];
}
var isDevelopmentMode = typeof process === "object" && typeof process.env === "object" && true;
var self = Symbol("self");
var EmptyDevToolsExtensions = {
  label: function() {
  },
  log: function() {
  }
};
var ErrorId;
(function(ErrorId2) {
  ErrorId2[ErrorId2["InitStateToValueFromState"] = 101] = "InitStateToValueFromState";
  ErrorId2[ErrorId2["SetStateToValueFromState"] = 102] = "SetStateToValueFromState";
  ErrorId2[ErrorId2["GetStateWhenPromised"] = 103] = "GetStateWhenPromised";
  ErrorId2[ErrorId2["SetStateWhenPromised"] = 104] = "SetStateWhenPromised";
  ErrorId2[ErrorId2["SetStateNestedToPromised"] = 105] = "SetStateNestedToPromised";
  ErrorId2[ErrorId2["SetStateWhenDestroyed"] = 106] = "SetStateWhenDestroyed";
  ErrorId2[ErrorId2["ToJson_Value"] = 108] = "ToJson_Value";
  ErrorId2[ErrorId2["ToJson_State"] = 109] = "ToJson_State";
  ErrorId2[ErrorId2["GetUnknownPlugin"] = 120] = "GetUnknownPlugin";
  ErrorId2[ErrorId2["SetProperty_State"] = 201] = "SetProperty_State";
  ErrorId2[ErrorId2["SetProperty_Value"] = 202] = "SetProperty_Value";
  ErrorId2[ErrorId2["SetPrototypeOf_State"] = 203] = "SetPrototypeOf_State";
  ErrorId2[ErrorId2["SetPrototypeOf_Value"] = 204] = "SetPrototypeOf_Value";
  ErrorId2[ErrorId2["PreventExtensions_State"] = 205] = "PreventExtensions_State";
  ErrorId2[ErrorId2["PreventExtensions_Value"] = 206] = "PreventExtensions_Value";
  ErrorId2[ErrorId2["DefineProperty_State"] = 207] = "DefineProperty_State";
  ErrorId2[ErrorId2["DefineProperty_Value"] = 208] = "DefineProperty_Value";
  ErrorId2[ErrorId2["DeleteProperty_State"] = 209] = "DeleteProperty_State";
  ErrorId2[ErrorId2["DeleteProperty_Value"] = 210] = "DeleteProperty_Value";
  ErrorId2[ErrorId2["Construct_State"] = 211] = "Construct_State";
  ErrorId2[ErrorId2["Construct_Value"] = 212] = "Construct_Value";
  ErrorId2[ErrorId2["Apply_State"] = 213] = "Apply_State";
  ErrorId2[ErrorId2["Apply_Value"] = 214] = "Apply_Value";
})(ErrorId || (ErrorId = {}));
var StateInvalidUsageError = function(_super) {
  __extends(StateInvalidUsageError2, _super);
  function StateInvalidUsageError2(path, id, details) {
    return _super.call(this, "Error: HOOKSTATE-" + id + " [path: /" + path.join("/") + (details ? ", details: " + details : "") + "]. " + ("See https://hookstate.js.org/docs/exceptions#hookstate-" + id)) || this;
  }
  return StateInvalidUsageError2;
}(Error);
function isNoProxyInitializer() {
  try {
    var used = new Proxy({}, {});
    return false;
  } catch (e) {
    return true;
  }
}
var IsNoProxy = isNoProxyInitializer();
var DowngradedID = Symbol("Downgraded");
var SelfMethodsID = Symbol("ProxyMarker");
var RootPath = [];
var DestroyedEdition = -1;
var Store = function() {
  function Store2(_value) {
    this._value = _value;
    this._edition = 0;
    this._subscribers = /* @__PURE__ */ new Set();
    this._setSubscribers = /* @__PURE__ */ new Set();
    this._destroySubscribers = /* @__PURE__ */ new Set();
    this._batchStartSubscribers = /* @__PURE__ */ new Set();
    this._batchFinishSubscribers = /* @__PURE__ */ new Set();
    this._plugins = /* @__PURE__ */ new Map();
    this._batches = 0;
    if (typeof _value === "object" && Promise.resolve(_value) === _value) {
      this._promised = this.createPromised(_value);
      this._value = none;
    } else if (_value === none) {
      this._promised = this.createPromised(void 0);
    }
  }
  Store2.prototype.createPromised = function(newValue) {
    var _this = this;
    var promised = new Promised(newValue ? Promise.resolve(newValue) : void 0, function(r) {
      if (_this.promised === promised && _this.edition !== DestroyedEdition) {
        _this._promised = void 0;
        _this.set(RootPath, r, void 0);
        _this.update([RootPath]);
      }
    }, function() {
      if (_this.promised === promised && _this.edition !== DestroyedEdition) {
        _this._edition += 1;
        _this.update([RootPath]);
      }
    }, function() {
      if (_this._batchesPendingActions && _this._value !== none && _this.edition !== DestroyedEdition) {
        var actions = _this._batchesPendingActions;
        _this._batchesPendingActions = void 0;
        actions.forEach(function(a) {
          return a();
        });
      }
    });
    return promised;
  };
  Object.defineProperty(Store2.prototype, "edition", {
    get: function() {
      return this._edition;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Store2.prototype, "promised", {
    get: function() {
      return this._promised;
    },
    enumerable: false,
    configurable: true
  });
  Store2.prototype.get = function(path) {
    var result = this._value;
    if (result === none) {
      return result;
    }
    path.forEach(function(p) {
      result = result[p];
    });
    return result;
  };
  Store2.prototype.set = function(path, value, mergeValue) {
    if (this._edition < 0) {
      throw new StateInvalidUsageError(path, ErrorId.SetStateWhenDestroyed);
    }
    if (path.length === 0) {
      var onSetArg = {
        path,
        state: value,
        value,
        previous: this._value,
        merged: mergeValue
      };
      if (value === none) {
        this._promised = this.createPromised(void 0);
        delete onSetArg.value;
        delete onSetArg.state;
      } else if (typeof value === "object" && Promise.resolve(value) === value) {
        this._promised = this.createPromised(value);
        value = none;
        delete onSetArg.value;
        delete onSetArg.state;
      } else if (this._promised && (!this._promised.resolver && !this._promised.fullfilled)) {
        throw new StateInvalidUsageError(path, ErrorId.SetStateWhenPromised);
      }
      var prevValue = this._value;
      if (prevValue === none) {
        delete onSetArg.previous;
      }
      this._value = value;
      this.afterSet(onSetArg);
      if (prevValue === none && this._value !== none && this.promised && this.promised.resolver) {
        this.promised.resolver(this._value);
      }
      return path;
    }
    if (typeof value === "object" && Promise.resolve(value) === value) {
      throw new StateInvalidUsageError(path, ErrorId.SetStateNestedToPromised);
    }
    var target = this._value;
    for (var i = 0; i < path.length - 1; i += 1) {
      target = target[path[i]];
    }
    var p = path[path.length - 1];
    if (p in target) {
      if (value !== none) {
        var prevValue = target[p];
        target[p] = value;
        this.afterSet({
          path,
          state: this._value,
          value,
          previous: prevValue,
          merged: mergeValue
        });
        return path;
      } else {
        var prevValue = target[p];
        if (Array.isArray(target) && typeof p === "number") {
          target.splice(p, 1);
        } else {
          delete target[p];
        }
        this.afterSet({
          path,
          state: this._value,
          previous: prevValue,
          merged: mergeValue
        });
        return path.slice(0, -1);
      }
    }
    if (value !== none) {
      target[p] = value;
      this.afterSet({
        path,
        state: this._value,
        value,
        merged: mergeValue
      });
      return path.slice(0, -1);
    }
    return path;
  };
  Store2.prototype.update = function(paths) {
    if (this._batches) {
      this._batchesPendingPaths = this._batchesPendingPaths || [];
      this._batchesPendingPaths = this._batchesPendingPaths.concat(paths);
      return;
    }
    var actions = [];
    this._subscribers.forEach(function(s) {
      return s.onSet(paths, actions);
    });
    actions.forEach(function(a) {
      return a();
    });
  };
  Store2.prototype.afterSet = function(params) {
    if (this._edition !== DestroyedEdition) {
      this._edition += 1;
      this._setSubscribers.forEach(function(cb) {
        return cb(params);
      });
    }
  };
  Store2.prototype.startBatch = function(path, options) {
    this._batches += 1;
    var cbArgument = {
      path
    };
    if (options && "context" in options) {
      cbArgument.context = options.context;
    }
    if (this._value !== none) {
      cbArgument.state = this._value;
    }
    this._batchStartSubscribers.forEach(function(cb) {
      return cb(cbArgument);
    });
  };
  Store2.prototype.finishBatch = function(path, options) {
    var cbArgument = {
      path
    };
    if (options && "context" in options) {
      cbArgument.context = options.context;
    }
    if (this._value !== none) {
      cbArgument.state = this._value;
    }
    this._batchFinishSubscribers.forEach(function(cb) {
      return cb(cbArgument);
    });
    this._batches -= 1;
    if (this._batches === 0) {
      if (this._batchesPendingPaths) {
        var paths = this._batchesPendingPaths;
        this._batchesPendingPaths = void 0;
        this.update(paths);
      }
    }
  };
  Store2.prototype.postponeBatch = function(action) {
    this._batchesPendingActions = this._batchesPendingActions || [];
    this._batchesPendingActions.push(action);
  };
  Store2.prototype.getPlugin = function(pluginId) {
    return this._plugins.get(pluginId);
  };
  Store2.prototype.register = function(plugin) {
    var existingInstance = this._plugins.get(plugin.id);
    if (existingInstance) {
      return;
    }
    var pluginCallbacks = plugin.init ? plugin.init(this.toMethods().self) : {};
    this._plugins.set(plugin.id, pluginCallbacks);
    if (pluginCallbacks.onSet) {
      this._setSubscribers.add(function(p) {
        return pluginCallbacks.onSet(p);
      });
    }
    if (pluginCallbacks.onDestroy) {
      this._destroySubscribers.add(function(p) {
        return pluginCallbacks.onDestroy(p);
      });
    }
    if (pluginCallbacks.onBatchStart) {
      this._batchStartSubscribers.add(function(p) {
        return pluginCallbacks.onBatchStart(p);
      });
    }
    if (pluginCallbacks.onBatchFinish) {
      this._batchFinishSubscribers.add(function(p) {
        return pluginCallbacks.onBatchFinish(p);
      });
    }
  };
  Store2.prototype.toMethods = function() {
    return new StateMethodsImpl(this, RootPath, this.get(RootPath), this.edition, OnSetUsedNoAction);
  };
  Store2.prototype.subscribe = function(l) {
    this._subscribers.add(l);
  };
  Store2.prototype.unsubscribe = function(l) {
    this._subscribers.delete(l);
  };
  Store2.prototype.destroy = function() {
    var _this = this;
    this._destroySubscribers.forEach(function(cb) {
      return cb(_this._value !== none ? { state: _this._value } : {});
    });
    this._edition = DestroyedEdition;
  };
  Store2.prototype.toJSON = function() {
    throw new StateInvalidUsageError(RootPath, ErrorId.ToJson_Value);
  };
  return Store2;
}();
var Promised = function() {
  function Promised2(promise, onResolve, onReject, onPostResolve) {
    var _this = this;
    this.promise = promise;
    if (!promise) {
      promise = new Promise(function(resolve) {
        _this.resolver = resolve;
      });
    }
    this.promise = promise.then(function(r) {
      _this.fullfilled = true;
      if (!_this.resolver) {
        onResolve(r);
      }
    }).catch(function(err) {
      _this.fullfilled = true;
      _this.error = err;
      onReject();
    }).then(function() {
      return onPostResolve();
    });
  }
  return Promised2;
}();
var ValueUnusedMarker = Symbol("ValueUnusedMarker");
function OnSetUsedNoAction() {
}
var UnmountedMarker = Symbol("UnmountedMarker");
OnSetUsedNoAction[UnmountedMarker] = true;
var StateMethodsImpl = function() {
  function StateMethodsImpl2(state, path, valueSource, valueEdition, onSetUsed) {
    this.state = state;
    this.path = path;
    this.valueSource = valueSource;
    this.valueEdition = valueEdition;
    this.onSetUsed = onSetUsed;
    this.valueCache = ValueUnusedMarker;
  }
  StateMethodsImpl2.prototype.getUntracked = function(allowPromised) {
    if (this.valueEdition !== this.state.edition) {
      this.valueSource = this.state.get(this.path);
      this.valueEdition = this.state.edition;
      if (this.isMounted) {
        if (this.valueCache !== ValueUnusedMarker) {
          this.valueCache = ValueUnusedMarker;
          this.get(true);
        }
      } else {
        this.valueCache = ValueUnusedMarker;
        delete this.childrenCache;
        delete this.selfCache;
      }
    }
    if (this.valueSource === none && !allowPromised) {
      if (this.state.promised && this.state.promised.error) {
        throw this.state.promised.error;
      }
      throw new StateInvalidUsageError(this.path, ErrorId.GetStateWhenPromised);
    }
    return this.valueSource;
  };
  StateMethodsImpl2.prototype.get = function(allowPromised) {
    var currentValue = this.getUntracked(allowPromised);
    if (this.valueCache === ValueUnusedMarker) {
      if (this.isDowngraded) {
        this.valueCache = currentValue;
      } else if (Array.isArray(currentValue)) {
        this.valueCache = this.valueArrayImpl(currentValue);
      } else if (typeof currentValue === "object" && currentValue !== null) {
        this.valueCache = this.valueObjectImpl(currentValue);
      } else {
        this.valueCache = currentValue;
      }
    }
    return this.valueCache;
  };
  Object.defineProperty(StateMethodsImpl2.prototype, "value", {
    get: function() {
      return this.get();
    },
    enumerable: false,
    configurable: true
  });
  StateMethodsImpl2.prototype.setUntracked = function(newValue, mergeValue) {
    if (typeof newValue === "function") {
      newValue = newValue(this.getUntracked());
    }
    if (typeof newValue === "object" && newValue !== null && newValue[SelfMethodsID]) {
      throw new StateInvalidUsageError(this.path, ErrorId.SetStateToValueFromState);
    }
    return [this.state.set(this.path, newValue, mergeValue)];
  };
  StateMethodsImpl2.prototype.set = function(newValue) {
    this.state.update(this.setUntracked(newValue));
  };
  StateMethodsImpl2.prototype.mergeUntracked = function(sourceValue) {
    var currentValue = this.getUntracked();
    if (typeof sourceValue === "function") {
      sourceValue = sourceValue(currentValue);
    }
    var updatedPaths;
    var deletedOrInsertedProps = false;
    if (Array.isArray(currentValue)) {
      if (Array.isArray(sourceValue)) {
        return this.setUntracked(currentValue.concat(sourceValue), sourceValue);
      } else {
        var deletedIndexes_1 = [];
        Object.keys(sourceValue).sort().forEach(function(i) {
          var index = Number(i);
          var newPropValue = sourceValue[index];
          if (newPropValue === none) {
            deletedOrInsertedProps = true;
            deletedIndexes_1.push(index);
          } else {
            deletedOrInsertedProps = deletedOrInsertedProps || !(index in currentValue);
            currentValue[index] = newPropValue;
          }
        });
        deletedIndexes_1.reverse().forEach(function(p) {
          currentValue.splice(p, 1);
        });
        updatedPaths = this.setUntracked(currentValue, sourceValue);
      }
    } else if (typeof currentValue === "object" && currentValue !== null) {
      Object.keys(sourceValue).forEach(function(key) {
        var newPropValue = sourceValue[key];
        if (newPropValue === none) {
          deletedOrInsertedProps = true;
          delete currentValue[key];
        } else {
          deletedOrInsertedProps = deletedOrInsertedProps || !(key in currentValue);
          currentValue[key] = newPropValue;
        }
      });
      updatedPaths = this.setUntracked(currentValue, sourceValue);
    } else if (typeof currentValue === "string") {
      return this.setUntracked(currentValue + String(sourceValue), sourceValue);
    } else {
      return this.setUntracked(sourceValue);
    }
    if (updatedPaths.length !== 1 || updatedPaths[0] !== this.path || deletedOrInsertedProps) {
      return updatedPaths;
    }
    var updatedPath = updatedPaths[0];
    return Object.keys(sourceValue).map(function(p) {
      return updatedPath.slice().concat(p);
    });
  };
  StateMethodsImpl2.prototype.merge = function(sourceValue) {
    this.state.update(this.mergeUntracked(sourceValue));
  };
  StateMethodsImpl2.prototype.nested = function(key) {
    return this.child(key).self;
  };
  StateMethodsImpl2.prototype.rerender = function(paths) {
    this.state.update(paths);
  };
  StateMethodsImpl2.prototype.destroy = function() {
    this.state.destroy();
  };
  StateMethodsImpl2.prototype.subscribe = function(l) {
    if (this.subscribers === void 0) {
      this.subscribers = /* @__PURE__ */ new Set();
    }
    this.subscribers.add(l);
  };
  StateMethodsImpl2.prototype.unsubscribe = function(l) {
    this.subscribers.delete(l);
  };
  Object.defineProperty(StateMethodsImpl2.prototype, "isMounted", {
    get: function() {
      return !this.onSetUsed[UnmountedMarker];
    },
    enumerable: false,
    configurable: true
  });
  StateMethodsImpl2.prototype.onUnmount = function() {
    this.onSetUsed[UnmountedMarker] = true;
  };
  StateMethodsImpl2.prototype.onSet = function(paths, actions) {
    var _this = this;
    var update = function() {
      if (_this.isDowngraded && _this.valueCache !== ValueUnusedMarker) {
        actions.push(_this.onSetUsed);
        return true;
      }
      for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
        var path = paths_1[_i];
        var firstChildKey = path[_this.path.length];
        if (firstChildKey === void 0) {
          if (_this.valueCache !== ValueUnusedMarker) {
            actions.push(_this.onSetUsed);
            return true;
          }
        } else {
          var firstChildValue = _this.childrenCache && _this.childrenCache[firstChildKey];
          if (firstChildValue && firstChildValue.onSet(paths, actions)) {
            return true;
          }
        }
      }
      return false;
    };
    var updated = update();
    if (!updated && this.subscribers !== void 0) {
      this.subscribers.forEach(function(s) {
        s.onSet(paths, actions);
      });
    }
    return updated;
  };
  Object.defineProperty(StateMethodsImpl2.prototype, "keys", {
    get: function() {
      var value = this.get();
      if (Array.isArray(value)) {
        return Object.keys(value).map(function(i) {
          return Number(i);
        }).filter(function(i) {
          return Number.isInteger(i);
        });
      }
      if (typeof value === "object" && value !== null) {
        return Object.keys(value);
      }
      return void 0;
    },
    enumerable: false,
    configurable: true
  });
  StateMethodsImpl2.prototype.child = function(key) {
    if (this.isMounted) {
      this.childrenCache = this.childrenCache || {};
      var cachehit = this.childrenCache[key];
      if (cachehit) {
        return cachehit;
      }
    }
    var r = new StateMethodsImpl2(this.state, this.path.slice().concat(key), this.valueSource[key], this.valueEdition, this.onSetUsed);
    if (this.isDowngraded) {
      r.isDowngraded = true;
    }
    if (this.childrenCache) {
      this.childrenCache[key] = r;
    }
    return r;
  };
  StateMethodsImpl2.prototype.valueArrayImpl = function(currentValue) {
    var _this = this;
    if (IsNoProxy) {
      this.isDowngraded = true;
      return currentValue;
    }
    return proxyWrap(this.path, currentValue, function() {
      return currentValue;
    }, function(target, key) {
      if (key === "length") {
        return target.length;
      }
      if (key in Array.prototype) {
        return Array.prototype[key];
      }
      if (key === SelfMethodsID) {
        return _this;
      }
      if (typeof key === "symbol") {
        return target[key];
      }
      var index = Number(key);
      if (!Number.isInteger(index)) {
        return void 0;
      }
      return _this.child(index).get();
    }, function(target, key, value) {
      if (typeof key === "symbol") {
        target[key] = value;
        return true;
      }
      throw new StateInvalidUsageError(_this.path, ErrorId.SetProperty_Value);
    }, true);
  };
  StateMethodsImpl2.prototype.valueObjectImpl = function(currentValue) {
    var _this = this;
    if (IsNoProxy) {
      this.isDowngraded = true;
      return currentValue;
    }
    return proxyWrap(this.path, currentValue, function() {
      return currentValue;
    }, function(target, key) {
      if (key === SelfMethodsID) {
        return _this;
      }
      if (typeof key === "symbol") {
        return target[key];
      }
      return _this.child(key).get();
    }, function(target, key, value) {
      if (typeof key === "symbol") {
        target[key] = value;
        return true;
      }
      throw new StateInvalidUsageError(_this.path, ErrorId.SetProperty_Value);
    }, true);
  };
  Object.defineProperty(StateMethodsImpl2.prototype, "self", {
    get: function() {
      var _this = this;
      if (this.selfCache) {
        return this.selfCache;
      }
      var getter = function(_, key) {
        if (key === self) {
          return _this;
        }
        if (typeof key === "symbol") {
          return void 0;
        }
        if (key === "toJSON") {
          throw new StateInvalidUsageError(_this.path, ErrorId.ToJson_State);
        }
        var nestedGetter = function(prop) {
          var currentDowngraded = _this.isDowngraded;
          var currentValue = _this.get();
          _this.isDowngraded = currentDowngraded;
          if ((typeof currentValue !== "object" || currentValue === null) && currentValue !== none) {
            return void 0;
          }
          if (Array.isArray(currentValue)) {
            if (prop === "length") {
              return currentValue.length;
            }
            if (prop in Array.prototype) {
              return Array.prototype[prop];
            }
            var index = Number(prop);
            if (!Number.isInteger(index)) {
              return void 0;
            }
            return _this.nested(index);
          }
          return _this.nested(prop.toString());
        };
        switch (key) {
          case "path":
            return _this.path;
          case "keys":
            return _this.keys;
          case "value":
            return _this.value;
          case "ornull":
            return _this.ornull;
          case "promised":
            return _this.promised;
          case "error":
            return _this.error;
          case "get":
            return function() {
              return _this.get();
            };
          case "set":
            return function(p) {
              return _this.set(p);
            };
          case "merge":
            return function(p) {
              return _this.merge(p);
            };
          case "nested":
            return function(p) {
              return nestedGetter(p);
            };
          case "batch":
            return function(action, context) {
              return _this.batch(action, context);
            };
          case "attach":
            return function(p) {
              return _this.attach(p);
            };
          case "destroy":
            return function() {
              return _this.destroy();
            };
          default:
            return nestedGetter(key);
        }
      };
      if (IsNoProxy) {
        var result_1 = Array.isArray(this.valueSource) ? [] : {};
        [
          self,
          "toJSON",
          "path",
          "keys",
          "value",
          "ornull",
          "promised",
          "error",
          "get",
          "set",
          "merge",
          "nested",
          "batch",
          "attach",
          "destroy"
        ].forEach(function(key) {
          Object.defineProperty(result_1, key, {
            get: function() {
              return getter(result_1, key);
            }
          });
        });
        if (typeof this.valueSource === "object" && this.valueSource !== null) {
          Object.keys(this.valueSource).forEach(function(key) {
            Object.defineProperty(result_1, key, {
              enumerable: true,
              get: function() {
                return getter(result_1, key);
              }
            });
          });
        }
        this.selfCache = result_1;
        return this.selfCache;
      }
      this.selfCache = proxyWrap(this.path, this.valueSource, function() {
        _this.get();
        return _this.valueSource;
      }, getter, function(_, key, value) {
        throw new StateInvalidUsageError(_this.path, ErrorId.SetProperty_State);
      }, false);
      return this.selfCache;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateMethodsImpl2.prototype, "promised", {
    get: function() {
      var currentValue = this.get(true);
      if (currentValue === none && this.state.promised && !this.state.promised.fullfilled) {
        return true;
      }
      return false;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateMethodsImpl2.prototype, "error", {
    get: function() {
      var currentValue = this.get(true);
      if (currentValue === none) {
        if (this.state.promised && this.state.promised.fullfilled) {
          return this.state.promised.error;
        }
        this.get();
      }
      return void 0;
    },
    enumerable: false,
    configurable: true
  });
  StateMethodsImpl2.prototype.batch = function(action, context) {
    var _this = this;
    var opts = { context };
    try {
      this.state.startBatch(this.path, opts);
      var result = action(this.self);
      if (result === postpone) {
        this.state.postponeBatch(function() {
          return _this.batch(action, context);
        });
      }
      return result;
    } finally {
      this.state.finishBatch(this.path, opts);
    }
  };
  Object.defineProperty(StateMethodsImpl2.prototype, "ornull", {
    get: function() {
      var value = this.get();
      if (value === null || value === void 0) {
        return value;
      }
      return this.self;
    },
    enumerable: false,
    configurable: true
  });
  StateMethodsImpl2.prototype.attach = function(p) {
    if (typeof p === "function") {
      var pluginMeta = p();
      if (pluginMeta.id === DowngradedID) {
        this.isDowngraded = true;
        if (this.valueCache !== ValueUnusedMarker) {
          var currentValue = this.getUntracked(true);
          this.valueCache = currentValue;
        }
        return this.self;
      }
      this.state.register(pluginMeta);
      return this.self;
    } else {
      return [
        this.state.getPlugin(p) || new StateInvalidUsageError(this.path, ErrorId.GetUnknownPlugin, p.toString()),
        this
      ];
    }
  };
  return StateMethodsImpl2;
}();
function proxyWrap(path, targetBootstrap, targetGetter, propertyGetter, propertySetter, isValueProxy) {
  var onInvalidUsage = function(op) {
    throw new StateInvalidUsageError(path, op);
  };
  if (typeof targetBootstrap !== "object" || targetBootstrap === null) {
    targetBootstrap = {};
  }
  return new Proxy(targetBootstrap, {
    getPrototypeOf: function(target) {
      var targetReal = targetGetter();
      if (targetReal === void 0 || targetReal === null) {
        return null;
      }
      return Object.getPrototypeOf(targetReal);
    },
    setPrototypeOf: function(target, v) {
      return onInvalidUsage(isValueProxy ? ErrorId.SetPrototypeOf_State : ErrorId.SetPrototypeOf_Value);
    },
    isExtensible: function(target) {
      return true;
    },
    preventExtensions: function(target) {
      return onInvalidUsage(isValueProxy ? ErrorId.PreventExtensions_State : ErrorId.PreventExtensions_Value);
    },
    getOwnPropertyDescriptor: function(target, p) {
      var targetReal = targetGetter();
      if (targetReal === void 0 || targetReal === null) {
        return void 0;
      }
      var origin = Object.getOwnPropertyDescriptor(targetReal, p);
      if (origin && Array.isArray(targetReal) && p in Array.prototype) {
        return origin;
      }
      return origin && {
        configurable: true,
        enumerable: origin.enumerable,
        get: function() {
          return propertyGetter(targetReal, p);
        },
        set: void 0
      };
    },
    has: function(target, p) {
      if (typeof p === "symbol") {
        return false;
      }
      var targetReal = targetGetter();
      if (typeof targetReal === "object" && targetReal !== null) {
        return p in targetReal;
      }
      return false;
    },
    get: propertyGetter,
    set: propertySetter,
    deleteProperty: function(target, p) {
      return onInvalidUsage(isValueProxy ? ErrorId.DeleteProperty_State : ErrorId.DeleteProperty_Value);
    },
    defineProperty: function(target, p, attributes) {
      return onInvalidUsage(isValueProxy ? ErrorId.DefineProperty_State : ErrorId.DefineProperty_Value);
    },
    ownKeys: function(target) {
      var targetReal = targetGetter();
      if (Array.isArray(targetReal)) {
        return Object.keys(targetReal).concat("length");
      }
      if (targetReal === void 0 || targetReal === null) {
        return [];
      }
      return Object.keys(targetReal);
    },
    apply: function(target, thisArg, argArray) {
      return onInvalidUsage(isValueProxy ? ErrorId.Apply_State : ErrorId.Apply_Value);
    },
    construct: function(target, argArray, newTarget) {
      return onInvalidUsage(isValueProxy ? ErrorId.Construct_State : ErrorId.Construct_Value);
    }
  });
}
function createStore(initial) {
  var initialValue = initial;
  if (typeof initial === "function") {
    initialValue = initial();
  }
  if (typeof initialValue === "object" && initialValue !== null && initialValue[SelfMethodsID]) {
    throw new StateInvalidUsageError(RootPath, ErrorId.InitStateToValueFromState);
  }
  return new Store(initialValue);
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react.default.useLayoutEffect : import_react.default.useEffect;
function useSubscribedStateMethods(state, path, update, subscribeTarget) {
  var link = new StateMethodsImpl(state, path, state.get(path), state.edition, update);
  useIsomorphicLayoutEffect(function() {
    subscribeTarget.subscribe(link);
    return function() {
      link.onUnmount();
      subscribeTarget.unsubscribe(link);
    };
  });
  return link;
}
export {
  DevTools,
  DevToolsID,
  Downgraded,
  StateFragment,
  createState,
  none,
  postpone,
  useHookstate,
  useState
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
//# sourceMappingURL=@hookstate_core.js.map
